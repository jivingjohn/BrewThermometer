[
    {
        "id": "92ff6f4c.2ecff",
        "type": "tab",
        "label": "Brew Thermometer",
        "disabled": false,
        "info": ""
    },
    {
        "id": "2951b576.f03d0a",
        "type": "http in",
        "z": "92ff6f4c.2ecff",
        "name": "POST Config",
        "url": "/BrewThermometer/Config",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 260,
        "wires": [
            [
                "167a143d.33cc2c"
            ]
        ]
    },
    {
        "id": "210e864c.65d5aa",
        "type": "http response",
        "z": "92ff6f4c.2ecff",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 760,
        "y": 260,
        "wires": []
    },
    {
        "id": "167a143d.33cc2c",
        "type": "function",
        "z": "92ff6f4c.2ecff",
        "name": "Set Config",
        "func": "var thermometer = flow.get(\"Thermometer\");\n\nthermometer.config.one_wire_pin = msg.payload.one_wire_pin || thermometer.Config.one_wire_pin;\nthermometer.Config.sample_frequency_seconds = msg.payload.sample_frequency_seconds || thermometer.Config.sample_frequency_seconds;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 260,
        "wires": [
            [
                "210e864c.65d5aa"
            ]
        ]
    },
    {
        "id": "fe5a872.125dc78",
        "type": "http in",
        "z": "92ff6f4c.2ecff",
        "name": "GET Config",
        "url": "/BrewThermometer/Config",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 100,
        "wires": [
            [
                "3f1af789.adf9b8"
            ]
        ]
    },
    {
        "id": "3f1af789.adf9b8",
        "type": "template",
        "z": "92ff6f4c.2ecff",
        "name": "Config",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"one_wire_pin\" : {{ flow.Thermometer.Config.one_wire_pin }},\n    \"sample_frequency_seconds\" : {{ flow.Thermometer.Config.sample_frequency_seconds }},\n        \"relay_pins\": {\n            \"Cooling\": 5,\n            \"Heating\": 4,\n            \"R3\": 0,\n            \"R4\": 2\n        }\n}",
        "x": 630,
        "y": 100,
        "wires": [
            [
                "f482ba21.2c1978"
            ]
        ]
    },
    {
        "id": "f482ba21.2c1978",
        "type": "http response",
        "z": "92ff6f4c.2ecff",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 760,
        "y": 100,
        "wires": []
    },
    {
        "id": "7b74ed62.5e1584",
        "type": "http in",
        "z": "92ff6f4c.2ecff",
        "name": "GET BrewThermometer",
        "url": "/BrewThermometer",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 60,
        "wires": [
            [
                "3e9cef63.97629"
            ]
        ]
    },
    {
        "id": "3e9cef63.97629",
        "type": "template",
        "z": "92ff6f4c.2ecff",
        "name": "Homepage",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<html>\n    <head><title>Brew Thermometer</title></head>\n    <body>\n        <h1>Current Temperature {{ flow.Thermometer.CurrentTemperature }} degrees Celcius</h1>\n        <h2>Current Heating Cooling State {{ flow.Thermometer.CurrentHeatingCoolingState }}</h2>\n        <h3>Target Temperature {{ flow.Thermometer.TargetTemperature }}</h3>\n        <h5>Reading taken on {{ flow.Thermometer.TimeStamp }}</h5>\n        <hr />\n        \n        <div>\n            <form method=\"post\" action=\"/BrewThermometer/TargetTemperature\">\n                <label for=\"TargetTemperature\">Target Temperature</label>\n                <input name=\"TargetTemperature\" id=\"TargetTemperature\" type=\"number\" min=\"15\" max=\"30\" step=\"0.5\" value=\"{{ flow.Thermometer.TargetTemperature }}\" />\n                <input type=\"submit\" />\n            </form>\n        </div>\n        <div>\n            <form method=\"post\" action=\"/BrewThermometer/TargetHeatingCoolingState\">\n                <label for=\"TargetHeatingCoolingState\">Target Heating Cooling State</label>\n                <input name=\"TargetHeatingCoolingState\" id=\"TargetHeatingCoolingState\" type=\"number\" min=\"0\" max=\"1\" value=\"{{ flow.Thermometer.TargetHeatingCoolingState }}\" />\n                <input type=\"submit\" />\n            </form>\n        </div>\n    </body>\n</html>",
        "x": 610,
        "y": 60,
        "wires": [
            [
                "a79239c5.4ca038"
            ]
        ]
    },
    {
        "id": "a79239c5.4ca038",
        "type": "http response",
        "z": "92ff6f4c.2ecff",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 760,
        "y": 60,
        "wires": []
    },
    {
        "id": "6dd679ea.43f148",
        "type": "http in",
        "z": "92ff6f4c.2ecff",
        "name": "POST CurrentTemperature",
        "url": "/BrewThermometer/CurrentTemperature",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 300,
        "wires": [
            [
                "342915fd.a638ba"
            ]
        ]
    },
    {
        "id": "342915fd.a638ba",
        "type": "function",
        "z": "92ff6f4c.2ecff",
        "name": "Set CurrentTemperature",
        "func": "var thermometer = flow.get(\"Thermometer\");\n\nthermometer.CurrentTemperature = msg.payload.CurrentTemperature || thermometer.CurrentTemperature;\nthermometer.TimeStamp = new Date()\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 410,
        "y": 300,
        "wires": [
            [
                "90088a2.f68ff78",
                "e0f5297e.c9a3b8"
            ]
        ]
    },
    {
        "id": "90088a2.f68ff78",
        "type": "http response",
        "z": "92ff6f4c.2ecff",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 760,
        "y": 300,
        "wires": []
    },
    {
        "id": "7101d898.dfb4c8",
        "type": "http in",
        "z": "92ff6f4c.2ecff",
        "name": "POST TargetTemperature",
        "url": "/BrewThermometer/TargetTemperature",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 340,
        "wires": [
            [
                "c2e5cd76.065cd"
            ]
        ]
    },
    {
        "id": "c2e5cd76.065cd",
        "type": "function",
        "z": "92ff6f4c.2ecff",
        "name": "Set TargetTemperature",
        "func": "var thermometer = flow.get(\"Thermometer\");\n\nthermometer.TargetTemperature = parseFloat(msg.payload.TargetTemperature) || thermometer.TargetTemperature;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 400,
        "y": 340,
        "wires": [
            [
                "b35821fe.ddda6",
                "66eecdcd.8b0ee4"
            ]
        ]
    },
    {
        "id": "8a65a3b6.2ca05",
        "type": "inject",
        "z": "92ff6f4c.2ecff",
        "name": "Initialise Thermometer",
        "topic": "",
        "payload": "{\"CurrentTemperature\":0,\"TargetTemperature\":15,\"CurrentHeatingCoolingState\":0,\"TargetHeatingCoolingState\":0,\"TimeStamp\":\"\",\"Config\":{\"one_wire_pin\":12,\"sample_frequency_seconds\":5,\"relay_pins\":{\"Cooling\":5,\"Heating\":4,\"R3\":0,\"R4\":2}}}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "x": 120,
        "y": 20,
        "wires": [
            [
                "e03b27f0.2a5d48"
            ]
        ]
    },
    {
        "id": "e03b27f0.2a5d48",
        "type": "change",
        "z": "92ff6f4c.2ecff",
        "name": "Initialise Thermometer",
        "rules": [
            {
                "t": "set",
                "p": "Thermometer",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 20,
        "wires": [
            []
        ]
    },
    {
        "id": "80a0cfd6.7c5c3",
        "type": "http in",
        "z": "92ff6f4c.2ecff",
        "name": "POST TargetHeatingCoolingState",
        "url": "/BrewThermometer/TargetHeatingCoolingState",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 380,
        "wires": [
            [
                "e1afe102.86c2b"
            ]
        ]
    },
    {
        "id": "e1afe102.86c2b",
        "type": "function",
        "z": "92ff6f4c.2ecff",
        "name": "Set TargetHeatingCoolingState",
        "func": "var thermometer = flow.get(\"Thermometer\");\n\nthermometer.TargetHeatingCoolingState = msg.payload.TargetHeatingCoolingState !== undefined ? parseInt(msg.payload.TargetHeatingCoolingState) : thermometer.TargetHeatingCoolingState;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 430,
        "y": 380,
        "wires": [
            [
                "b35821fe.ddda6",
                "66eecdcd.8b0ee4"
            ]
        ]
    },
    {
        "id": "adbf7f99.b3046",
        "type": "http response",
        "z": "92ff6f4c.2ecff",
        "name": "Redirect /BrewThermometer",
        "statusCode": "303",
        "headers": {
            "location": "/BrewThermometer"
        },
        "x": 880,
        "y": 340,
        "wires": []
    },
    {
        "id": "b35821fe.ddda6",
        "type": "function",
        "z": "92ff6f4c.2ecff",
        "name": "CurrentHeatingCoolingState",
        "func": "var thermometer = flow.get(\"Thermometer\");\n\nvar currentTemperature = Math.round(thermometer.CurrentTemperature * 2) / 2\n\nvar temperatureDiff = currentTemperature - thermometer.TargetTemperature;\nif (temperatureDiff === 0 || thermometer.TargetHeatingCoolingState === 0) {\n    // we're at temperature\n    // or thermometer is turned off\n    thermometer.CurrentHeatingCoolingState = 0\n} else if (temperatureDiff > 0) {\n        // it's too cool\n        thermometer.CurrentHeatingCoolingState = 2\n} else if (temperatureDiff < 0) {\n        // it's too hot\n        thermometer.CurrentHeatingCoolingState = 1\n}\n\nreturn { \n    payload : {\n        \"CurrentHeatingCoolingState\" : thermometer.CurrentHeatingCoolingState,\n        \"TargetHeatingCoolingState\" : thermometer.TargetHeatingCoolingState,\n        \"CurrentTemperature\" : thermometer.CurrentTemperature,\n        \"TargetTemperature\" : thermometer.TargetTemperature\n    } \n};",
        "outputs": 1,
        "noerr": 0,
        "x": 720,
        "y": 420,
        "wires": [
            [
                "d7782393.676d3"
            ]
        ]
    },
    {
        "id": "d7782393.676d3",
        "type": "homekit-service",
        "z": "92ff6f4c.2ecff",
        "isParent": true,
        "bridge": "2d9c434d.03909c",
        "parentService": "",
        "name": "Brew Temperature Controller",
        "serviceName": "Thermostat",
        "topic": "",
        "filter": false,
        "manufacturer": "John Saunders",
        "model": "Raspberry Pi",
        "serialNo": "1",
        "cameraConfigVideoProcessor": "ffmpeg",
        "cameraConfigSource": "",
        "cameraConfigStillImageSource": "",
        "cameraConfigMaxStreams": 2,
        "cameraConfigMaxWidth": 1280,
        "cameraConfigMaxHeight": 720,
        "cameraConfigMaxFPS": 10,
        "cameraConfigMaxBitrate": 300,
        "cameraConfigVideoCodec": "libx264",
        "cameraConfigAudioCodec": "libfdk_aac",
        "cameraConfigAudio": false,
        "cameraConfigPacketSize": 1316,
        "cameraConfigVerticalFlip": false,
        "cameraConfigHorizontalFlip": false,
        "cameraConfigMapVideo": "0:0",
        "cameraConfigMapAudio": "0:1",
        "cameraConfigVideoFilter": "scale=1280:720",
        "cameraConfigAdditionalCommandLine": "-tune zerolatency",
        "cameraConfigDebug": false,
        "cameraConfigSnapshotOutput": "disabled",
        "cameraConfigInterfaceName": "",
        "characteristicProperties": "{\n    \"TargetHeatingCoolingState\": {\n        \"validValues\":[ 0, 1 ]\n    },\n    \"CurrentHeatingCoolingState\": {\n        \"validValues\":[ 0, 1, 2 ]\n    },\n    \"TargetTemperature\": {\n         \"minValue\": 15,\n         \"maxValue\": 30\n    }\n}",
        "x": 140,
        "y": 420,
        "wires": [
            [
                "c2e5cd76.065cd",
                "e1afe102.86c2b"
            ],
            []
        ]
    },
    {
        "id": "82958dcd.e8e57",
        "type": "template",
        "z": "92ff6f4c.2ecff",
        "name": "CurrentHeatingCoolingState",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"CurrentHeatingCoolingState\" : {{ flow.Thermometer.CurrentHeatingCoolingState }}\n}",
        "x": 560,
        "y": 140,
        "wires": [
            [
                "359065d7.1d2e1a"
            ]
        ]
    },
    {
        "id": "5c2cd814.268c58",
        "type": "http in",
        "z": "92ff6f4c.2ecff",
        "name": "GET CurrentHeatingCoolingState",
        "url": "/BrewThermometer/CurrentHeatingCoolingState",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 140,
        "wires": [
            [
                "82958dcd.e8e57"
            ]
        ]
    },
    {
        "id": "359065d7.1d2e1a",
        "type": "http response",
        "z": "92ff6f4c.2ecff",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 760,
        "y": 140,
        "wires": []
    },
    {
        "id": "66eecdcd.8b0ee4",
        "type": "switch",
        "z": "92ff6f4c.2ecff",
        "name": "Test for msg.req",
        "property": "req",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "object",
                "vt": "object"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 660,
        "y": 340,
        "wires": [
            [
                "adbf7f99.b3046"
            ]
        ]
    },
    {
        "id": "e0f5297e.c9a3b8",
        "type": "switch",
        "z": "92ff6f4c.2ecff",
        "name": "Test CurrentTemperature change",
        "property": "Thermometer.CurrentTemperature",
        "propertyType": "flow",
        "rules": [
            {
                "t": "neq",
                "v": "",
                "vt": "prev"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 440,
        "y": 420,
        "wires": [
            [
                "b35821fe.ddda6"
            ]
        ]
    },
    {
        "id": "2d9c434d.03909c",
        "type": "homekit-bridge",
        "z": "",
        "bridgeName": "Raspberry Pi Bridge",
        "pinCode": "123-45-678",
        "port": "",
        "allowInsecureRequest": false,
        "manufacturer": "John Saunders",
        "model": "Raspberry Pi",
        "serialNo": "1",
        "customMdnsConfig": false,
        "mdnsMulticast": true,
        "mdnsInterface": "",
        "mdnsPort": "",
        "mdnsIp": "",
        "mdnsTtl": "",
        "mdnsLoopback": true,
        "mdnsReuseAddr": true,
        "allowMessagePassthrough": false
    }
]
